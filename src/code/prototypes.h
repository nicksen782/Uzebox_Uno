void _emu_whisper(int port, u8 val);
void clear_debug_showDebugData();
void debug_showDebugData();
void errorHandler(enum errorTypes error);
void msgHandler(enum msgTypes msg);
void pre_VsyncCallBack();
void updateIndividualTimers();
void post_VsyncCallBack();
void getInputs();
void N782_print(int x,int y,const char *string, u8 fromRam);
void N782_print_u8(int x,int y, u8 num);
void N782_print_u16(int x,int y, u16 num);
void gameInit();
void rotateRamTile_n90(u8 (mat)[8][8]);
void swapColors_ramtile(u8 srcColor, u8 dstColor, u8 ramtile_id);
void clearRamtile( u8 id, u8 newColor);
void clearAllReservedRamtiles();
void clearAllUnusedReservedRamtiles();
void removeCard_sm(u8 player, u8 position);
void removeCard_lg();
void removeUnusedRamtilesInTilemap(u8 *map);
void returnDiscardsToDrawPile();
void resetTheDeck();
void setVramTilemap(u8 x, u8 y, u8 w, u8 h, u8 *map);
void getNewCardTilemap( u8 playerNum, u8 size, u8 value, u8 color, u8 *map);
void DrawMap_vramtiles(u8 x,u8 y, u8 *map);
void drawCard( u8 playerNum, u8 x, u8 y, u8 size, u8 value, u8 color);
void MapSprite2_nra( u8 startSprite, const char *map, u8 spriteFlags );
void redrawUnderDrawPile();
void redrawUnderDiscardPile();
void returnCardsForPlayer(u8 playerNum);
void displayCardsForPlayer(u8 playerNum, u8 startPos, u8 cardDelay);
void removePlayerCards(u8 playerNumber);
void clearbgmessage();
void dealSpecifiedCard_anim(u8 playerNum, u8 cardIndex, u8 cardPos, u8 cardDelay, u8 option);
void newGameSetup();
void redrawMainInfoRegion();
void get_cardDims_byPlayerAndCardPosition(u8 playerNum, u8 position, u8 *x, u8 *y);
void updatePlayerDisplayedData();
void playSFX(u8 patch);
void gstate_title();
void gstate_title_n782();
void gstate_title_uzebox();
void gstate_title_mainmenu();
void gstate_options();
void gstate_options1();
void gstate_options2();
void gstate_credits1();
void gstate_credits();
void gstate_credits2();
void gstate_rules_1();
void gstate_rules_2();
void gstate_rules();
void gstate_playing();
void getRandomSeedViaUserInput();
void drawFaceDownCard(u8 playerNum, u8 position);
void displayCards_byPlayer(u8 playerNum, u8 option);
void getCursorPos(u8 playerNum, u8 cursorIndex, u8 *x, u8 *y);
void askUserToSetNewColor(enum SNC_choices howToChoose);
void moveCard( struct cardData_ *cardData, u8 autoRemove, u8 autoRemoveDelay, u8 cardDelay);
void showPoints();
void setPoints(u8 winner);
void unoCheck();;
void winRound(u8 winnerOfTheRound);
void countColorsValuesMatches(u8 playerNum);
void main() __attribute__ ((noreturn));

u8 nextPlayerNumber(u8 playerNum, enum NPN_nextPlayerNumber options);
u8 pause();
u8 getMatchingCardValue(u8 playerNum, u8 value);
u8 getMatchingCardColor(u8 playerNum, u8 color);
u8 canCardBePlayed(u8 cardIndex);
u8 tileIsDuplicateOf(u8 ramtile_id);
u8 countPlayerCards(u8 playerNum);
u8 countDrawPile();
u8 countDiscardPile();
u8 countUsedRamtile_ids();
u8 countAvailableRamtile_ids();
u8 getCardFromDrawPile(u8 playerNum, u8 howMany);
u16 getRandomNumber(int min, int max);